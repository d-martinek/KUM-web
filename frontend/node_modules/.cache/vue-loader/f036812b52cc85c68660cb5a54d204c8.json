{"remainingRequest":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/danijel/Documents/Workspace/KUM-web/frontend/src/components/dashboard/Tasks.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/src/components/dashboard/Tasks.vue","mtime":1558303398770},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/css-loader/index.js","mtime":1557082350999},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1557082351628},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/postcss-loader/src/index.js","mtime":1557082351445},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1557082350867},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/vue-loader/lib/index.js","mtime":1557082351628}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#tasks{\n    width: 100%;\n}\n\n.task{\n    padding: 1.5em;\n}\n.task-chip-text{\n    position: absolute;\n    padding: 0.25em 1em 0.25em 2em;\n    background-color: #303030;\n    right: 1em;\n    border-radius: 1em;\n}\n\n.task-chip-avatars{\n    right: 1em;\n    position: absolute;\n    padding-right: 3em;\n}\n\n.tooltip {\n  position: relative;\n  display: inline-block;\n  border-bottom: 1px dotted black;\n}\n\n.tooltip .tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  background-color: #555;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -60px;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.tooltip .tooltiptext::after {\n  content: \"\";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #555 transparent transparent transparent;\n}\n\n.tooltip:hover .tooltiptext {\n  visibility: visible;\n  opacity: 1;\n}\n",{"version":3,"sources":["Tasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Tasks.vue","sourceRoot":"src/components/dashboard","sourcesContent":["<template>\n\t<div id=\"tasks\">\n        <v-container grid-list-xl>\n            <v-layout row wrap v-if=\"users[0]\">\n                <v-flex xs12 sm6 lg4 v-for=\"(task, index) in tasks\" :key=\"index\">\n                    <div class=\"task\">\n                       <v-card color=\"424242\" class=\"white--text\">\n                            <v-card-title primary-title>\n                                <v-layout row wrap>\n                                    <v-flex xs10 sm9 md10 lg9 justify-end align-end>\n                                        <span style=\"opacity: 0.5;\">{{ task.createdAt | moment(\"from\", \"now\") }}</span>\n                                        <br>\n                                        <div class=\"headline\">{{ task.title }}</div></v-flex>\n                                    <v-flex xs2 sm3 md2 lg3 align-self-start>\n                                        <v-avatar size=\"2em\" style=\"float: right;\" class=\"tooltip\">\n                                            <img :src=\"returnAvatarByUserId(task.creatorId).avatar\">\n                                            <span class=\"tooltiptext\">{{ returnAvatarByUserId(task.creatorId).firstName }} {{ returnAvatarByUserId(task.creatorId).lastName }}</span>\n                                        </v-avatar>\n                                    </v-flex>\n                                    <v-flex sm12>{{ task.description }}</v-flex>\n                                </v-layout>\n                            </v-card-title>\n                            <v-divider light></v-divider>\n                            <v-card-actions>\n                                <v-layout row wrap>\n                                    <v-flex xs2>\n                                        <span v-if=\"!task.assigned.users.includes($store.state.user._id)\">\n                                            <v-btn :disabled=\"task.assigned.users.length >= task.assigned.limit\" @click=\"addMe(index)\" class=\"hidden-sm-and-down\" flat dark> Assign </v-btn>\n                                            <v-btn :disabled=\"task.assigned.users.length >= task.assigned.limit\" @click=\"addMe(index)\" class=\"hidden-md-and-up\" depressed icon dark small>\n                                                <v-icon>add</v-icon>\n                                            </v-btn>\n                                        </span>\n                                        <span v-else>\n                                            <v-btn @click=\"removeMe(index)\" class=\"hidden-sm-and-down\" color=\"orange\" flat dark> Unassign </v-btn>\n                                            <v-btn @click=\"removeMe(index)\" class=\"hidden-md-and-up\" depressed icon dark small>\n                                                <v-icon color=\"orange\">remove</v-icon>\n                                            </v-btn>\n                                        </span>\n                                    </v-flex>\n                                    <v-flex xs10>\n                                        <span class=\"task-chip-text\">{{ task.assigned.users.length }} / {{ task.assigned.limit }}</span>\n                                        <span class=\"task-chip-avatars\" v-for=\"(userId, i) in task.assigned.users\" :key=\"i\">\n                                            <v-avatar size=\"2em\" class=\"tooltip\" :style=\"{right: 15 * (task.assigned.users.length - i)  + 'px'}\">\n                                                <img :src=\"returnAvatarByUserId(userId).avatar\">\n                                                <span class=\"tooltiptext\">{{ returnAvatarByUserId(userId).firstName }} {{ returnAvatarByUserId(userId).lastName }}</span>\n                                            </v-avatar>\n                                        </span>\n                                    </v-flex>\n                                </v-layout>\n                            </v-card-actions>\n                        </v-card>\n                    </div>\n                </v-flex>\n            </v-layout>\n        </v-container>\n\t</div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n\tdata() {\n\t\treturn {\n            editPermission: false,\n\t\t\ttasks: [],\n            users: []\n\t\t}\n    },\n\tmounted() {\n        this.checkPermission()\n        this.$store.watch(() => this.$store.getters['checkAuth'], () => {\n            this.checkPermission()\n        })\n\n\n        this.eventId = this.$route.params.id\n\n\t\taxios.get('/api/tasks')\n\t\t.then(res => {\n\t\t\tif(res.data.success == true){\n\t\t\t\tif(this.$store.state.userAuthenticated){\n                    res.data.tasks.forEach(task => {\n                        this.$store.dispatch('permissionAllowed', task.permissions).then(\n                            perm => {\n                                if(perm){\n                                    this.tasks.push(task)\n                                }\n                            }\n                        )\n                    })\n                }\n\t\t\t}\n        })\n        \n        axios.get('/api/users')\n\t\t.then(res => {\n\t\t\tif(res.data.success == true){\n\t\t\t\tthis.users = res.data.users\n\t\t\t}\n\t\t})\n    },\n    methods: {\n        returnAvatarByUserId: function(userId) {\n            for (let user of this.users) {\n                if(user._id == userId){\n                    let tempAvatar = \"\"\n\n                    if (user.avatar.includes('@/assets/img/avatar')) {\n                        tempAvatar = require(user.avatar)\n                    } else {\n                        tempAvatar = user.avatar\n                    }\n\n                    return {\n                        avatar: tempAvatar,\n                        firstName: user.firstName,\n                        lastName: user.lastName\n                    }\n                }\n            }\n        },\n\n        checkPermission: function() {\n            if(this.$store.state.userAuthenticated){\n                this.$store.dispatch('permissionAllowed', [0, 1, 2, 3]).then(\n                    perm => {\n                        this.editPermission = perm\n                    }\n                )\n            }\n        },\n\n        addMe: function(i){\n            this.tasks[i].assigned.users.push(this.$store.state.user._id)\n        },\n        removeMe: function(i){\n            let index = this.tasks[i].assigned.users.indexOf(this.$store.state.user._id)\n            if (index > -1) {\n                this.tasks[i].assigned.users.splice(index, 1)\n            }\n        }\n    },\n};\n</script>\n\n<style>\n#tasks{\n    width: 100%;\n}\n\n.task{\n    padding: 1.5em;\n}\n.task-chip-text{\n    position: absolute;\n    padding: 0.25em 1em 0.25em 2em;\n    background-color: #303030;\n    right: 1em;\n    border-radius: 1em;\n}\n\n.task-chip-avatars{\n    right: 1em;\n    position: absolute;\n    padding-right: 3em;\n}\n\n.tooltip {\n  position: relative;\n  display: inline-block;\n  border-bottom: 1px dotted black;\n}\n\n.tooltip .tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  background-color: #555;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -60px;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.tooltip .tooltiptext::after {\n  content: \"\";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #555 transparent transparent transparent;\n}\n\n.tooltip:hover .tooltiptext {\n  visibility: visible;\n  opacity: 1;\n}\n</style>\n"]}]}