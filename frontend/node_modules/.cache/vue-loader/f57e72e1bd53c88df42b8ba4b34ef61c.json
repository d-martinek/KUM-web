{"remainingRequest":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/danijel/Documents/Workspace/KUM-web/frontend/src/components/signUp/Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/src/components/signUp/Register.vue","mtime":1554812594382},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1549443809249},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/babel-loader/lib/index.js","mtime":1549443804466},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1549443809249},{"path":"/home/danijel/Documents/Workspace/KUM-web/frontend/node_modules/vue-loader/lib/index.js","mtime":1549443812532}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\"\n\nexport default {\n  name: 'register',\n  data() {\n    return {\n      register: {\n        email: null,\n        password: null,\n        confirmPassword: null,\n        firstName: null,\n        lastName: null,\n        errors: [],\n        status: null\n      }\n    };\n  },\n  mounted() {\n    this.$store.commit('getEmails');\n  },\n  methods: {\n\n    validateEmail(email) {\n      return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n    },\n\n    registerValidate() {\n      \n      this.register.errors = []\n\n      if(!this.register.email) {\n        this.register.errors.push(\"Email required.\")\n      } else if(!this.validateEmail(this.register.email)) {\n        this.register.errors.push(\"Email must be in format example@domain.com\")\n      }  else if(this.$store.state.userEmails.includes(this.register.email)) {\n        this.register.errors.push(\"Email is not allowed. Please choose another one.\")\n      }\n\n      if(!this.register.password) this.register.errors.push(\"Password required.\")\n      if(!this.register.confirmPassword) {\n        this.register.errors.push(\"Confirm Password required.\")\n      } else if(this.register.password != this.register.confirmPassword) {\n        this.register.errors.push(\"Passwords must match\")\n      }\n      if(!this.register.firstName) this.register.errors.push(\"First name required.\")\n      if(!this.register.lastName) this.register.errors.push(\"Last name required.\")\n\n      if(!(this.register.errors && this.register.errors.length)){\n        return true\n      } else{\n        return false\n      }\n      \n    },\n\n    registerHandler() {\n\n      let valid = this.registerValidate();\n\n      const registerUserData = {\n        email: this.register.email,\n        password: this.register.password,\n        firstName: this.register.firstName,\n        lastName: this.register.lastName\n      }\n\n      if(valid) {\n        axios.post(\"/api/register\", registerUserData)\n        .then(res => {\n          if (res.data.success == true) {\n            this.$store.dispatch('authUser')\n\n            this.$router.push({\n              name: \"Dashboard\"\n            })\n          } else {\n            this.register.status = res.data.message\n          }\n        })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/components/signUp","sourcesContent":["<template>\n  <div class=\"login-register\">\n    <div class=\"registerErrors\">\n      <div v-for=\"(err, i) in register.errors\" :key=\"i\">\n        {{ err }}\n      </div>\n      {{register.status}}\n    </div>\n    <div class=\"register\">\n      <span>Register: </span>\n      <input v-model=\"register.email\" type=\"text\" placeholder=\"Email\">\n      <input v-model=\"register.password\" type=\"password\" placeholder=\"Password\">\n      <input v-model=\"register.confirmPassword\" type=\"password\" placeholder=\"Confirm password\">\n      <input v-model=\"register.firstName\" type=\"text\" placeholder=\"First name\">\n      <input v-model=\"register.lastName\" type=\"text\" placeholder=\"Last name\">\n      <button v-on:click=\"registerHandler\">Submit</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\"\n\nexport default {\n  name: 'register',\n  data() {\n    return {\n      register: {\n        email: null,\n        password: null,\n        confirmPassword: null,\n        firstName: null,\n        lastName: null,\n        errors: [],\n        status: null\n      }\n    };\n  },\n  mounted() {\n    this.$store.commit('getEmails');\n  },\n  methods: {\n\n    validateEmail(email) {\n      return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n    },\n\n    registerValidate() {\n      \n      this.register.errors = []\n\n      if(!this.register.email) {\n        this.register.errors.push(\"Email required.\")\n      } else if(!this.validateEmail(this.register.email)) {\n        this.register.errors.push(\"Email must be in format example@domain.com\")\n      }  else if(this.$store.state.userEmails.includes(this.register.email)) {\n        this.register.errors.push(\"Email is not allowed. Please choose another one.\")\n      }\n\n      if(!this.register.password) this.register.errors.push(\"Password required.\")\n      if(!this.register.confirmPassword) {\n        this.register.errors.push(\"Confirm Password required.\")\n      } else if(this.register.password != this.register.confirmPassword) {\n        this.register.errors.push(\"Passwords must match\")\n      }\n      if(!this.register.firstName) this.register.errors.push(\"First name required.\")\n      if(!this.register.lastName) this.register.errors.push(\"Last name required.\")\n\n      if(!(this.register.errors && this.register.errors.length)){\n        return true\n      } else{\n        return false\n      }\n      \n    },\n\n    registerHandler() {\n\n      let valid = this.registerValidate();\n\n      const registerUserData = {\n        email: this.register.email,\n        password: this.register.password,\n        firstName: this.register.firstName,\n        lastName: this.register.lastName\n      }\n\n      if(valid) {\n        axios.post(\"/api/register\", registerUserData)\n        .then(res => {\n          if (res.data.success == true) {\n            this.$store.dispatch('authUser')\n\n            this.$router.push({\n              name: \"Dashboard\"\n            })\n          } else {\n            this.register.status = res.data.message\n          }\n        })\n      }\n    }\n  }\n}\n</script>\n"]}]}